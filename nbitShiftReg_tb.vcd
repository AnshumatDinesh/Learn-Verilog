$date
	Fri Nov 03 02:11:06 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module nbitShiftReg_tb $end
$var wire 1 ! Sout $end
$var wire 8 " Dout [7:0] $end
$var reg 1 # Clk $end
$var reg 8 $ Din [7:0] $end
$var reg 1 % LD $end
$var reg 1 & Sin $end
$scope module Sreg $end
$var wire 1 # Clk $end
$var wire 8 ' Din [7:0] $end
$var wire 1 % LD $end
$var wire 1 & Sin $end
$var wire 1 ! Sout $end
$var wire 8 ( Dout [7:0] $end
$var parameter 32 ) N $end
$scope begin genblk1[0] $end
$var parameter 2 * i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 + D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 , Q $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 - i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 . D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 / Q $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 0 i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 1 D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 2 Q $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 3 i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 4 D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 5 Q $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 6 i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 7 D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 8 Q $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 9 i $end
$scope module u1 $end
$var wire 1 # Clk $end
$var wire 2 : D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 ; Q $end
$upscope $end
$upscope $end
$scope module u0 $end
$var wire 1 # Clk $end
$var wire 2 < D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 = Q $end
$upscope $end
$scope module u2 $end
$var wire 1 # Clk $end
$var wire 2 > D [1:0] $end
$var wire 1 % Sel $end
$var reg 1 ? Q $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b101 9
b100 6
b11 3
b10 0
b1 -
b0 *
b1000 )
$end
#0
$dumpvars
x?
bx1 >
x=
b0 <
x;
bx0 :
x8
bx1 7
x5
bx0 4
x2
bx1 1
x/
bx0 .
x,
bx1 +
bx (
b1010101 '
0&
0%
b1010101 $
1#
bx "
x!
$end
#10
b10 .
b1 1
b10 4
b1 7
b10 :
b1 >
b1 +
1!
1,
0/
12
05
18
0;
0=
b1010101 "
b1010101 (
1?
0#
#20
1#
1%
#30
0!
b11 >
b0 :
b11 7
b0 4
b11 1
b0 .
0?
1;
08
15
02
1/
b101010 "
b101010 (
0,
0#
#40
1#
#50
b1 1
b10 4
b1 7
b10 :
b1 >
1!
0/
12
05
18
0;
b10101 "
b10101 (
1?
0#
#60
1#
#70
0!
b11 >
b0 :
b11 7
b0 4
0?
1;
08
15
b1010 "
b1010 (
02
0#
#80
1#
#90
b1 7
b10 :
b1 >
1!
05
18
0;
b101 "
b101 (
1?
0#
#100
1#
#110
0!
b11 >
b0 :
0?
1;
b10 "
b10 (
08
0#
#120
1#
#130
b1 >
1!
0;
b1 "
b1 (
1?
0#
